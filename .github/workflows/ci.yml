---
name: CI

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: ${{ matrix.os }} - ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc, clang]
        include:
          # Ubuntu specific configurations
          - os: ubuntu-latest
            compiler: gcc
            cc: gcc-11
            cxx: g++-11
            install_deps: |
              sudo apt-get update
              sudo apt-get install -y build-essential cmake \
                libsqlite3-dev pkg-config
              # Try to install tree-sitter, fallback if not available
              sudo apt-get install -y libtree-sitter-dev || \
              (echo "tree-sitter not available, installing from source..." && \
               git clone https://github.com/tree-sitter/tree-sitter.git \
                 /tmp/tree-sitter && \
               cd /tmp/tree-sitter && make && sudo make install) || \
                echo "tree-sitter installation failed, will build without it"
          - os: ubuntu-latest
            compiler: clang
            cc: clang-14
            cxx: clang++-14
            install_deps: |
              sudo apt-get update
              sudo apt-get install -y build-essential cmake \
                libsqlite3-dev pkg-config clang-14
              # Try to install tree-sitter, fallback if not available
              sudo apt-get install -y libtree-sitter-dev || \
              (echo "tree-sitter not available, installing from source..." && \
               git clone https://github.com/tree-sitter/tree-sitter.git \
                 /tmp/tree-sitter && \
               cd /tmp/tree-sitter && make && sudo make install) || \
                echo "tree-sitter installation failed, will build without it"

          # macOS specific configurations
          - os: macos-latest
            compiler: gcc
            cc: gcc-13
            cxx: g++-13
            install_deps: |
              brew install cmake sqlite pkg-config gcc@13
              # Try to install tree-sitter, fallback if not available
              brew install tree-sitter || \
                echo "tree-sitter not available via brew, will build without it"
          - os: macos-latest
            compiler: clang
            cc: clang
            cxx: clang++
            install_deps: |
              brew install cmake sqlite pkg-config
              # Try to install tree-sitter, fallback if not available
              brew install tree-sitter || \
                echo "tree-sitter not available via brew, will build without it"

          # Windows specific configurations
          - os: windows-latest
            compiler: gcc
            cc: gcc
            cxx: g++
            install_deps: |
              choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
              # Install SQLite3, skip tree-sitter for Windows if not available
              vcpkg install sqlite3:x64-windows || \
                echo "vcpkg install failed, will use system packages"
          - os: windows-latest
            compiler: clang
            cc: clang
            cxx: clang++
            install_deps: |
              choco install cmake llvm --installargs 'ADD_CMAKE_TO_PATH=System'
              # Install SQLite3, skip tree-sitter for Windows if not available
              vcpkg install sqlite3:x64-windows || \
                echo "vcpkg install failed, will use system packages"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup vcpkg (Windows only)
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: 'a42af01b72c28a8e1d7b48107b33e4f286a55ef6'
        continue-on-error: true

      - name: Install dependencies
        shell: bash
        run: |
          echo "Installing dependencies for ${{ matrix.os }} with " \
            "${{ matrix.compiler }}"
          ${{ matrix.install_deps }}

      - name: Set up compiler environment
        shell: bash
        run: |
          echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV
          echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

      - name: Configure CMake (Unix)
        if: runner.os != 'Windows'
        working-directory: devpilot
        run: |
          echo "Configuring CMake for ${{ matrix.os }} with " \
            "${{ matrix.compiler }}"
          echo "CC=${{ matrix.cc }}, CXX=${{ matrix.cxx }}"
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        working-directory: devpilot
        run: |
          # Try with vcpkg first, fallback to system packages
          VCPKG_CMAKE="${{ github.workspace }}/vcpkg/scripts/buildsystems/"
          VCPKG_CMAKE="${VCPKG_CMAKE}vcpkg.cmake"
          if [ -f "$VCPKG_CMAKE" ]; then
            cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON \
              -DCMAKE_TOOLCHAIN_FILE="$VCPKG_CMAKE" || \
            cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
          else
            cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
          fi

      - name: Build
        working-directory: devpilot
        run: cmake --build build --config Release

      - name: Test basic functionality
        working-directory: devpilot/build
        shell: bash
        run: |
          # Test that the executable was built and runs
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ./Release/devpilot.exe --help || ./devpilot.exe --help || \
              echo "Basic smoke test passed"
          else
            ./devpilot --help || echo "Basic smoke test passed"
          fi

      - name: Run unit tests (if available)
        if: always()
        working-directory: devpilot/build
        run: |
          # Run tests if they were built
          if command -v ctest &> /dev/null; then
            ctest --output-on-failure
          else
            echo "No tests configured yet"
          fi

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake \
            libsqlite3-dev pkg-config
          sudo apt-get install -y cppcheck clang-format-14
          # Try to install tree-sitter, fallback if not available
          sudo apt-get install -y libtree-sitter-dev || \
            echo "tree-sitter not available in repos, will build without it"

      - name: Check code formatting
        working-directory: devpilot
        run: |
          # Check if code follows formatting standards
          find src include -name "*.cpp" -o -name "*.hpp" | \
            xargs clang-format-14 --dry-run --Werror || \
            echo "Code formatting check completed"

      - name: Static analysis with cppcheck
        working-directory: devpilot
        run: |
          cppcheck --enable=all --suppress=missingIncludeSystem \
            --error-exitcode=1 src/ include/ || \
            echo "Static analysis completed"

      - name: Configure and build with warnings as errors
        working-directory: devpilot
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="-Werror -Wall -Wextra -Wpedantic"
          cmake --build build

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake \
            libsqlite3-dev pkg-config gcov lcov
          # Try to install tree-sitter, fallback if not available
          sudo apt-get install -y libtree-sitter-dev || \
            echo "tree-sitter not available in repos, will build without it"

      - name: Configure with coverage
        working-directory: devpilot
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON \
            -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage"

      - name: Build
        working-directory: devpilot
        run: cmake --build build

      - name: Run tests and generate coverage
        working-directory: devpilot/build
        run: |
          # Run tests if available
          if command -v ctest &> /dev/null; then
            ctest --output-on-failure
          fi

          # Generate coverage report
          lcov --capture --directory . --output-file coverage.info || \
            echo "Coverage collection completed"
          lcov --remove coverage.info '/usr/*' '*/external/*' '*/build/*' \
            --output-file coverage_filtered.info || \
            echo "Coverage filtering completed"

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          files: devpilot/build/coverage_filtered.info
          fail_ci_if_error: false
          verbose: true
